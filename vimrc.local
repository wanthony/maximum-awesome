call plug#begin('~/.vim/plugged')

Plug 'airblade/vim-gitgutter'
Plug 'altercation/vim-colors-solarized'
Plug 'austintaylor/vim-indentobject'
Plug 'christoomey/vim-tmux-navigator'
Plug 'juvenn/mustache.vim'
Plug 'kchmck/vim-coffee-script'
Plug 'kien/ctrlp.vim'
Plug 'leafgarland/typescript-vim'
Plug 'majutsushi/tagbar'
Plug 'mileszs/ack.vim'
Plug 'msanders/snipmate.vim'
Plug 'nathanaelkane/vim-indent-guides'
Plug 'nono/vim-handlebars'
Plug 'pangloss/vim-javascript'
Plug 'scrooloose/nerdtree'
Plug 'scrooloose/syntastic'
Plug 'slim-template/vim-slim'
" Plug 'tpope/vim-bundler'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-cucumber'
Plug 'tpope/vim-endwise'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-pastie'
Plug 'tpope/vim-ragtag'
Plug 'tpope/vim-rails'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-vividchalk'
Plug 'eventualbuddha/vim-protobuf'
Plug 'vim-ruby/vim-ruby'
Plug 'vim-scripts/Align'
Plug 'vim-scripts/greplace.vim'
Plug 'vim-scripts/kwbdi.vim'
Plug 'vim-scripts/matchit.zip'
Plug 'molokai'
Plug 'Railscasts-Theme-GUIand256color'
Plug 'twilight'
Plug 'Mustang2'
Plug 'tpope/vim-rbenv'
Plug 'junegunn/seoul256.vim'
Plug 'bruno-/vim-vertical-move'
Plug 'jellybeans.vim'
Plug 'Keithbsmiley/investigate.vim'
Plug 'vimux'
Plug 'danro/rename.vim'
Plug 'thoughtbot/vim-rspec'
Plug 'mattn/emmet-vim'
Plug 'jnurmine/Zenburn'
Plug 'Gundo'
Plug 'itchyny/lightline.vim'
Plug 'justinmk/vim-sneak'
Plug 'DeepInside/BracketHighlighter.vim'
Plug 'junegunn/goyo.vim'
Plug 'css_color.vim'
Plug '29decibel/vim-stringify'
Plug 'tpope/vim-haml'
Plug 'cakebaker/scss-syntax.vim'
Plug 'terryma/vim-multiple-cursors'
Plug 'mhinz/vim-startify'

call plug#end()
set nocursorline " don't highlight current line

" keyboard shortcuts
inoremap jj <ESC>

" highlight search
set hlsearch
nmap <leader>hl :let @/ = ""<CR>

set guifont=Droid_Sans_Mono_for_Powerline:h11

" Lightline
let g:lightline = {
      \ 'colorscheme': 'jellybeans',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'fugitive', 'filename' ] ],
      \ },
      \ 'component_function': {
      \   'fugitive': 'MyLightlineFugitive',
      \   'readonly': 'MyLightlineReadonly',
      \   'modified': 'MyLightlineModified',
      \   'filename': 'MyLightlineFilename',
      \ },
      \ }

function! MyLightlineFugitive()
  return exists("*fugitive#head") ? fugitive#head() : ''
endfunction

function! MyLightlineModified()
  if &filetype == "help"
    return ""
  elseif &modified
    return "+"
  elseif &modifiable
    return ""
  else
    return ""
  endif
endfunction

function! MyLightlineReadonly()
  if &filetype == "help"
    return ""
  elseif &readonly
    return "RO"
  else
    return ""
  endif
endfunction

function! MyLightlineFilename()
  return ('' != MyLightlineReadonly() ? MyLightlineReadonly() . ' ' : '') .
       \ ('' != expand('%:t') ? expand('%:t') : '[No Name]') .
       \ ('' != MyLightlineModified() ? ' ' . MyLightlineModified() : '')
endfunction

" gui settings
if (&t_Co == 256 || has('gui_running'))
  if ($TERM_PROGRAM == 'iTerm.app')
    colorscheme jellybeans
  else
    colorscheme jellybeans
  endif
endif

" Disambiguate ,a & ,t from the Align plugin, making them fast again.
"
" This section is here to prevent AlignMaps from adding a bunch of mappings
" that interfere with the very-common ,a and ,t mappings. This will get run
" at every startup to remove the AlignMaps for the *next* vim startup.
"
" If you do want the AlignMaps mappings, remove this section, remove
" ~/.vim/bundle/Align, and re-run rake in maximum-awesome.
function! s:RemoveConflictingAlignMaps()
  if exists("g:loaded_AlignMapsPlugin")
    AlignMapsClean
  endif
endfunction
command! -nargs=0 RemoveConflictingAlignMaps call s:RemoveConflictingAlignMaps()
silent! autocmd VimEnter * RemoveConflictingAlignMaps

autocmd BufWritePre *.* :call whitespace#strip_trailing()

" Fugitive - Delete temp buffers after we're done with them
autocmd BufReadPost fugitive://* set bufhidden=delete

" Fugitive - Add git branch to status line
set statusline=%<%f\ %h%m%r%{fugitive#statusline()}%=%-14.(%l,%c%V%)\ %P

nnoremap <Leader>G :GundoToggle<CR>

" Snipmate Author (ME!)
let g:snips_author = 'Anthony White'

let g:sneak#streak = 1

nnoremap f :Sneak! 1<cr>
nnoremap F :SneakBackward! 1<cr>
xnoremap f :<c-u>SneakV! 1<cr>
xnoremap F :<c-u>SneakVBackward! 1<cr>

nnoremap <Leader>z :Goyo<CR>

" ng-attribute style attributes are valid (ignore their errors)
let g:syntastic_javascript_jshint_conf = '~/.jshintrc'
let g:syntastic_javascript_jshint_conf = '~/.jshintrc'

nnoremap Q @q

" Startify Config
let g:startify_custom_header =
  \ map(split(system('fortune | cowsay'), '\n'), '"  ". v:val') + ['','']

" MY CUSTOM KEYBINDS
map <leader>rc :e! $MYVIMRC.local<CR>
map <leader>rC :so $MYVIMRC.local<CR>


